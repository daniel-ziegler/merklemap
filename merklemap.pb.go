// Code generated by protoc-gen-go.
// source: merklemap.proto
// DO NOT EDIT!

package merklemap

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type LookupResultPb struct {
	LeafValue        []byte   `protobuf:"bytes,1,opt,name=leaf_value" json:"leaf_value,omitempty"`
	LeafKVHash       []byte   `protobuf:"bytes,2,opt,name=leaf_k_v_hash" json:"leaf_k_v_hash,omitempty"`
	IsLeftSibling    []bool   `protobuf:"varint,3,rep,name=is_left_sibling" json:"is_left_sibling,omitempty"`
	SiblingHash      [][]byte `protobuf:"bytes,4,rep,name=sibling_hash" json:"sibling_hash,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LookupResultPb) Reset()         { *m = LookupResultPb{} }
func (m *LookupResultPb) String() string { return proto.CompactTextString(m) }
func (*LookupResultPb) ProtoMessage()    {}

func (m *LookupResultPb) GetLeafValue() []byte {
	if m != nil {
		return m.LeafValue
	}
	return nil
}

func (m *LookupResultPb) GetLeafKVHash() []byte {
	if m != nil {
		return m.LeafKVHash
	}
	return nil
}

func (m *LookupResultPb) GetIsLeftSibling() []bool {
	if m != nil {
		return m.IsLeftSibling
	}
	return nil
}

func (m *LookupResultPb) GetSiblingHash() [][]byte {
	if m != nil {
		return m.SiblingHash
	}
	return nil
}

func init() {
}
