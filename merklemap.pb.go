// Code generated by protoc-gen-go.
// source: merklemap.proto
// DO NOT EDIT!

package merklemap

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type SiblingHash struct {
	Hash             []byte `protobuf:"bytes,1,req,name=hash" json:"hash,omitempty"`
	IsLeftSibling    *bool  `protobuf:"varint,2,req,name=is_left_sibling" json:"is_left_sibling,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SiblingHash) Reset()         { *m = SiblingHash{} }
func (m *SiblingHash) String() string { return proto.CompactTextString(m) }
func (*SiblingHash) ProtoMessage()    {}

func (m *SiblingHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SiblingHash) GetIsLeftSibling() bool {
	if m != nil && m.IsLeftSibling != nil {
		return *m.IsLeftSibling
	}
	return false
}

type MerklePath struct {
	SiblingHashes    []*SiblingHash `protobuf:"bytes,1,rep,name=sibling_hashes" json:"sibling_hashes,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *MerklePath) Reset()         { *m = MerklePath{} }
func (m *MerklePath) String() string { return proto.CompactTextString(m) }
func (*MerklePath) ProtoMessage()    {}

func (m *MerklePath) GetSiblingHashes() []*SiblingHash {
	if m != nil {
		return m.SiblingHashes
	}
	return nil
}

func init() {
}
